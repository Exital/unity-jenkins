pipeline {
    agent {
        kubernetes {
            label 'K8S-With-Docker'
        }
    }
    environment {
        IMAGE_TAG = ''
        IMAGE_REPO = ''
        HELM_VALUES_FILE = ''
    }
    stages {
        stage('Checkout Source Code') {
            steps {
                cleanWs()
                dir('portfolio') {
                    script {
                        checkout([$class: 'GitSCM',
                                branches: [[name: portfolio_branch]],
                                extensions: [],
                                submoduleCfg: [],
                                userRemoteConfigs: [[url: 'https://github.com/Exital/portfolio.git']]])

                    if (portfolio_branch == 'master') {
                        IMAGE_REPO = 'portfolio-prod'
                        HELM_VALUES_FILE = 'values-prod.yaml'
                    } else if (portfolio_branch == 'staging') {
                        IMAGE_REPO = 'portfolio-staging'
                        HELM_VALUES_FILE = 'values-staging.yaml'
                    } else {
                        IMAGE_REPO = 'portfolio-dev'
                    }
                    echo "Using IMAGE_REPO: ${IMAGE_REPO}"
                    }
                }

                dir('gitops') {
                    script {
                        checkout([$class: 'GitSCM',
                                branches: [[name: 'master']],
                                extensions: [],
                                submoduleCfg: [],
                                userRemoteConfigs: [[url: 'https://github.com/Exital/portfolioGitOps.git']]])
                        sh "git checkout master"
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('portfolio') {
                    script {
                        def commitHash = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                        IMAGE_TAG = "${portfolio_branch}_${commitHash}"
                        
                        def docker_build_params = "--label 'app.branch=${portfolio_branch}' --label 'app.commit=${commitHash}'"

                        docker.withRegistry("https://${DOCKER_REGISTRY}", 'harbor-credentials') {
                            def docker_image = docker.build("${DOCKER_REGISTRY}/portfolio/${IMAGE_REPO}:${IMAGE_TAG}", "${docker_build_params} -f Dockerfile.prod .")
                            docker_image.push()
                            sh "docker rmi ${docker_image.id}"
                        }
                    }
                }
            }
        }

        
        stage('Update GitOps values') {
            when {
                expression {
                    portfolio_branch == 'master' || portfolio_branch == 'staging'
                }
            }
            steps {
                dir('gitops') {
                    withCredentials([string(credentialsId: 'github-repo-token', variable: 'GITHUB_TOKEN')]) {
                        script {            
                            // Read the Deployment YAML file
                            def helm_values_path = "portfolio-webapp/${HELM_VALUES_FILE}"
                            def helm_values = readYaml file: helm_values_path

                            // Update the image tag in the Deployment YAML
                            helm_values = helm_values['image']['tag'] = IMAGE_TAG

                            // Write the modified Deployment YAML back to the file
                            writeFile(file: helm_values_path, text: helm_values)
                            sh 'git remote set-url origin https://$GITHUB_TOKEN@github.com/Exital/portfolioGitOps.git'
                            sh "git config user.email 'talrosen3@google.com'"
                            sh "git config user.name 'Jenkins CI'"
                            sh "git commit -am 'Update Docker image tag in ${HELM_VALUES_FILE}.yml'"
                            sh "git push origin master"
                        }
                    }
                }
            }
        }
    }
}